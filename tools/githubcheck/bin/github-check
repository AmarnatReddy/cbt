#!/usr/bin/env python3

import argparse
import sys

from githubcheck import Check


def main():
    parser = argparse.ArgumentParser()

    repo_group = parser.add_argument_group('repo options')
    repo_group.add_argument('--owner', help='repo owner', default='ceph')
    repo_group.add_argument('--repo', help='repo name', default='ceph')

    app_group = parser.add_argument_group('app options')
    app_group.add_argument('--pkey-file', help='path to private key of app',
                           required=True,
                           type=argparse.FileType('rb'))
    app_group.add_argument('--app-id', type=int, required=True)
    app_group.add_argument('--install-id', type=int, required=True)

    check_group = parser.add_argument_group('check options')
    check_group.add_argument('--sha', help='SHA1 of commit', required=True)
    check_group.add_argument('--name', help='the name of check', required=True)
    check_group.add_argument('--details-url', help='the URL of jenkins job')
    check_group.add_argument('--status', help='the status of check',
                             choices=['queued', 'in_progress', 'completed'],
                             default='in_progress')
    check_group.add_argument('--conclusion',
                             help='the conclusion of a completed test',
                             choices=['success', 'failure', 'neutral',
                                      'cancelled', 'skipped', 'timed_out',
                                      'action_required'])
    check_group.add_argument('--title',
                             help='the title of check',
                             default='Summary')
    check_group.add_argument('--summary',
                             help='a summary of check')
    if sys.stdin.isatty():
        default_text = None
    else:
        default_text = sys.stdin
    check_group.add_argument('--text',
                             help='path to a Markdown formatted text file',
                             type=argparse.FileType('r'),
                             default=default_text)
    args = parser.parse_args()

    check = Check(args.owner, args.repo, args.name,
                  args.pkey_file.read(), args.app_id, args.install_id)
    if args.status == 'completed':
        if args.conclusion is None:
            parser.error("please specify '--conclusion' "
                         "if '--status' is 'completed'")
        if args.summary is None:
            parser.error("please specify '--summary' "
                         "if '--status' is 'completed'")
        if args.text is None:
            parser.error("please specify '--text' "
                         "if '--status' is 'completed'")
        output = {'title': 'completed',
                  'summary': args.summary,
                  'text': args.text.read()}
        check.complete(args.sha, args.conclusion, output, args.details_url)
    else:
        output = {'title': args.title,
                  'summary': args.summary if args.summary else 'started'}
        if args.text is not None:
            output['text'] = args.text.read()
        check.start(args.sha, args.status, output, args.details_url)


if __name__ == '__main__':
    main()
